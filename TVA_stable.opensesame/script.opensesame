# Generated by OpenSesame 0.27.4 (Frisky Freud)
# Thu Oct 17 13:55:31 2013 (nt)
# <http://www.cogsci.nl/opensesame>

set foreground "red"
set subject_parity "even"
set font_size "68"
set description "Default description"
set font_family "Arial"
set title "TVA  Test"
set font_bold "no"
set coordinates "relative"
set height "1080"
set mouse_backend "psycho"
set width "1920"
set compensation "0"
set sampler_backend "legacy"
set font_italic "no"
set background "black"
set subject_nr "0"
set keyboard_backend "psycho"
set start "experiment"
set transparent_variables "no"
set synth_backend "legacy"
set canvas_backend "psycho"

define loop Loop_trials
	set repeat "2"
	set description "Repeatedly runs another item"
	set item "Sequence_trials"
	set column_order "Condition;Letter_duration"
	set cycles "18"
	set order "random"
	setcycle 0 Letter_duration "10"
	setcycle 0 Condition "1"
	setcycle 1 Letter_duration "20"
	setcycle 1 Condition "1"
	setcycle 2 Letter_duration "50"
	setcycle 2 Condition "1"
	setcycle 3 Letter_duration "80"
	setcycle 3 Condition "1"
	setcycle 4 Letter_duration "140"
	setcycle 4 Condition "1"
	setcycle 5 Letter_duration "200"
	setcycle 5 Condition "1"
	setcycle 6 Letter_duration "80"
	setcycle 6 Condition "2"
	setcycle 7 Letter_duration "80"
	setcycle 7 Condition "2"
	setcycle 8 Letter_duration "80"
	setcycle 8 Condition "2"
	setcycle 9 Letter_duration "80"
	setcycle 9 Condition "2"
	setcycle 10 Letter_duration "80"
	setcycle 10 Condition "2"
	setcycle 11 Letter_duration "80"
	setcycle 11 Condition "2"
	setcycle 12 Letter_duration "80"
	setcycle 12 Condition "3"
	setcycle 13 Letter_duration "80"
	setcycle 13 Condition "3"
	setcycle 14 Letter_duration "80"
	setcycle 14 Condition "3"
	setcycle 15 Letter_duration "80"
	setcycle 15 Condition "3"
	setcycle 16 Letter_duration "80"
	setcycle 16 Condition "3"
	setcycle 17 Letter_duration "80"
	setcycle 17 Condition "3"
	run Sequence_trials

define form_text_input Letter_Reproduction
	set rows "1;1;6"
	set description "A simple text input form"
	set cols "1"
	set form_question ""
	set form_title "Report"
	set form_var "response"
	set margins "350;700;350;700"
	widget 0 0 1 1 label text="[form_title]"
	widget 0 1 1 1 label center="no" text="[form_question]"
	widget 0 2 1 1 text_input focus="yes" stub="" return_accepts="yes" var="[form_var]"


define sketchpad Whole_Report_6
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [c1] [c2] "[L1]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c3] [c4] "[L2]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c5] [c6] "[L3]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c7] [c8] "[L4]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c9] [c10] "[L5]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c11] [c12] "[L6]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script Letter_generation
	set _run ""
	___prepare__
	##create coordinates for the position of the letter stimuli on the screen
	import math
	
	#insert your parameters here
	screen_width = 53.2
	resolution_width = 1920
	#insert formula to compute radius here; depending on distance from screen
	radius = 7.865 # = distance from screen center to letters, corresponding to a visual angle of 7.5U+00B0 and a distance from participant to screen of 60cm 
	#computation at http://rechneronline.de/sehwinkel/
	
	# letter size must also be related to distance from screen.
	# Letter height should correspond to a visual angle of 2.7
	# for Arial and a screen with the parameters from above that is:
	# 2.828cm letter height, font size 137
	
	
	
	#compute coordinates for the letter positioning
	Y_at_ZeroX = (resolution_width / screen_width)*radius
	Y_and_X = (Y_at_ZeroX/math.sqrt(2))
	
	##This module will generate 6 random letters to be presented on the screen
	#Import random number generator
	import random
	random.seed()
	
	#take 6 numbers out of 20 without replacement
	n1 = random.randint(1,20)
	n2 = random.randint(1,20)
	while n2 == n1:
	    n2 = random.randint(1,20)
	n3 = random.randint(1,20)
	while n3 == n2 or n3 == n1:
	    n3 = random.randint(1,20)
	n4 = random.randint(1,20)
	while n4 == n3 or n4 == n2 or n4 == n1:
	    n4 = random.randint(1,20)
	n5 = random.randint(1,20)
	while n5 == n4 or n5 == n3 or n5 == n2 or n5 == n1:
	    n5 = random.randint(1,20)
	n6 = random.randint(1,20)
	while n6 == n5 or n6 == n4 or n6 == n3 or n6 == n2 or n6 == n1:
	    n6 = random.randint(1,20)
	
	
	#assign numbers to letter
	#n1
	if n1 == 1:
	    Letter1 = 'A'
	elif n1 == 2:
	    Letter1 = 'B'
	elif n1 == 3:
	    Letter1 = 'D'
	elif n1 == 4:
	    Letter1 = 'E'
	elif n1 == 5:
	    Letter1 = 'F'
	elif n1 == 6:
	    Letter1 = 'G'
	elif n1 == 7:
	    Letter1 = 'H'
	elif n1 == 8:
	    Letter1 = 'J'
	elif n1 == 9:
	    Letter1 = 'K'
	elif n1 == 10:
	    Letter1 = 'L'
	elif n1 == 11:
	    Letter1 = 'M'
	elif n1 == 12:
	    Letter1 = 'N'
	elif n1 == 13:
	    Letter1 = 'O'
	elif n1 == 14:
	    Letter1 = 'P'
	elif n1 == 15:
	    Letter1 = 'R'
	elif n1 == 16:
	    Letter1 = 'S'
	elif n1 == 17:
	    Letter1 = 'T'
	elif n1 == 18:
	    Letter1 = 'V'
	elif n1 == 19:
	    Letter1 = 'X'
	elif n1 == 20:
	    Letter1 = 'Z'
	
	#n2
	if n2 == 1:
	    Letter2 = 'A'
	elif n2 == 2:
	    Letter2 = 'B'
	elif n2 == 3:
	    Letter2 = 'D'
	elif n2 == 4:
	    Letter2 = 'E'
	elif n2 == 5:
	    Letter2 = 'F'
	elif n2 == 6:
	    Letter2 = 'G'
	elif n2 == 7:
	    Letter2 = 'H'
	elif n2 == 8:
	    Letter2 = 'J'
	elif n2 == 9:
	    Letter2 = 'K'
	elif n2 == 10:
	    Letter2 = 'L'
	elif n2 == 11:
	    Letter2 = 'M'
	elif n2 == 12:
	    Letter2 = 'N'
	elif n2 == 13:
	    Letter2 = 'O'
	elif n2 == 14:
	    Letter2 = 'P'
	elif n2 == 15:
	    Letter2 = 'R'
	elif n2 == 16:
	    Letter2 = 'S'
	elif n2 == 17:
	    Letter2 = 'T'
	elif n2 == 18:
	    Letter2 = 'V'
	elif n2 == 19:
	    Letter2 = 'X'
	elif n2 == 20:
	    Letter2 = 'Z'
	
	#n3
	if n3 == 1:
	    Letter3 = 'A'
	elif n3 == 2:
	    Letter3 = 'B'
	elif n3 == 3:
	    Letter3 = 'D'
	elif n3 == 4:
	    Letter3 = 'E'
	elif n3 == 5:
	    Letter3 = 'F'
	elif n3 == 6:
	    Letter3 = 'G'
	elif n3 == 7:
	    Letter3 = 'H'
	elif n3 == 8:
	    Letter3 = 'J'
	elif n3 == 9:
	    Letter3 = 'K'
	elif n3 == 10:
	    Letter3 = 'L'
	elif n3 == 11:
	    Letter3 = 'M'
	elif n3 == 12:
	    Letter3 = 'N'
	elif n3 == 13:
	    Letter3 = 'O'
	elif n3 == 14:
	    Letter3 = 'P'
	elif n3 == 15:
	    Letter3 = 'R'
	elif n3 == 16:
	    Letter3 = 'S'
	elif n3 == 17:
	    Letter3 = 'T'
	elif n3 == 18:
	    Letter3 = 'V'
	elif n3 == 19:
	    Letter3 = 'X'
	elif n3 == 20:
	    Letter3 = 'Z'
	
	#4
	if n4 == 1:
	    Letter4 = 'A'
	elif n4 == 2:
	    Letter4 = 'B'
	elif n4 == 3:
	    Letter4 = 'D'
	elif n4 == 4:
	    Letter4 = 'E'
	elif n4 == 5:
	    Letter4 = 'F'
	elif n4 == 6:
	    Letter4 = 'G'
	elif n4 == 7:
	    Letter4 = 'H'
	elif n4 == 8:
	    Letter4 = 'J'
	elif n4 == 9:
	    Letter4 = 'K'
	elif n4 == 10:
	    Letter4 = 'L'
	elif n4 == 11:
	    Letter4 = 'M'
	elif n4 == 12:
	    Letter4 = 'N'
	elif n4 == 13:
	    Letter4 = 'O'
	elif n4 == 14:
	    Letter4 = 'P'
	elif n4 == 15:
	    Letter4 = 'R'
	elif n4 == 16:
	    Letter4 = 'S'
	elif n4 == 17:
	    Letter4 = 'T'
	elif n4 == 18:
	    Letter4 = 'V'
	elif n4 == 19:
	    Letter4 = 'X'
	elif n4 == 20:
	    Letter4 = 'Z'
	
	#n5
	if n5 == 1:
	    Letter5 = 'A'
	elif n5 == 2:
	    Letter5 = 'B'
	elif n5 == 3:
	    Letter5 = 'D'
	elif n5 == 4:
	    Letter5 = 'E'
	elif n5 == 5:
	    Letter5 = 'F'
	elif n5 == 6:
	    Letter5 = 'G'
	elif n5 == 7:
	    Letter5 = 'H'
	elif n5 == 8:
	    Letter5 = 'J'
	elif n5 == 9:
	    Letter5 = 'K'
	elif n5 == 10:
	    Letter5 = 'L'
	elif n5 == 11:
	    Letter5 = 'M'
	elif n5 == 12:
	    Letter5 = 'N'
	elif n5 == 13:
	    Letter5 = 'O'
	elif n5 == 14:
	    Letter5 = 'P'
	elif n5 == 15:
	    Letter5 = 'R'
	elif n5 == 16:
	    Letter5 = 'S'
	elif n5 == 17:
	    Letter5 = 'T'
	elif n5 == 18:
	    Letter5 = 'V'
	elif n5 == 19:
	    Letter5 = 'X'
	elif n5 == 20:
	    Letter5 = 'Z'
	
	#n6
	if n6 == 1:
	    Letter6 = 'A'
	elif n6 == 2:
	    Letter6 = 'B'
	elif n6 == 3:
	    Letter6 = 'D'
	elif n6 == 4:
	    Letter6 = 'E'
	elif n6 == 5:
	    Letter6 = 'F'
	elif n6 == 6:
	    Letter6 = 'G'
	elif n6 == 7:
	    Letter6 = 'H'
	elif n6 == 8:
	    Letter6 = 'J'
	elif n6 == 9:
	    Letter6 = 'K'
	elif n6 == 10:
	    Letter6 = 'L'
	elif n6 == 11:
	    Letter6 = 'M'
	elif n6 == 12:
	    Letter6 = 'N'
	elif n6 == 13:
	    Letter6 = 'O'
	elif n6 == 14:
	    Letter6 = 'P'
	elif n6 == 15:
	    Letter6 = 'R'
	elif n6 == 16:
	    Letter6 = 'S'
	elif n6 == 17:
	    Letter6 = 'T'
	elif n6 == 18:
	    Letter6 = 'V'
	elif n6 == 19:
	    Letter6 = 'X'
	elif n6 == 20:
	    Letter6 = 'Z'
	
	
	#randomize position of all 6 letters to log position data in the same variable for all trial types (c1-c12)
	p1 = random.randint(1,6)
	p2 = random.randint(1,6)
	while p2 == p1:
	    p2 = random.randint(1,6)
	p3 = random.randint(1,6)
	while p3 == p2 or p3 == p1:
	    p3 = random.randint(1,6)
	p4 = random.randint(1,6)
	while p4 == p3 or p4 == p2 or p4 == p1:
	    p4 = random.randint(1,6)
	p5 = random.randint(1,6)
	while p5 == p4 or p5 == p3 or p5 == p2 or p5 == p1:
	    p5 = random.randint(1,6)
	p6 = random.randint(1,6)
	while p6 == p5 or p6 == p4 or p6 == p3 or p6 == p2 or p6 == p1:
	    p6 = random.randint(1,6)
	
	
	#assign positions to letters, based on coordinates computed above
	#position1
	if p1 == 1:
	    c1 = -Y_at_ZeroX
	    c2 = 0
	elif p1 == 2:
	    c1 = -Y_and_X
	    c2 = -Y_and_X
	elif p1 == 3:
	    c1 = Y_and_X
	    c2 = -Y_and_X
	elif p1 == 4:
	    c1 = Y_at_ZeroX
	    c2 = 0
	elif p1 == 5:
	    c1 = Y_and_X
	    c2 = Y_and_X
	elif p1 == 6:
	    c1 = -Y_and_X
	    c2 = Y_and_X
	
	#position2
	if p2 == 1:
	    c3 = -Y_at_ZeroX
	    c4 = 0
	elif p2 == 2:
	    c3 = -Y_and_X
	    c4 = -Y_and_X
	elif p2 == 3:
	    c3 = Y_and_X
	    c4 = -Y_and_X
	elif p2 == 4:
	    c3 = Y_at_ZeroX
	    c4 = 0
	elif p2 == 5:
	    c3 = Y_and_X
	    c4 = Y_and_X
	elif p2 == 6:
	    c3 = -Y_and_X
	    c4 = Y_and_X
	
	#position3
	if p3 == 1:
	    c5 = -Y_at_ZeroX
	    c6 = 0
	elif p3 == 2:
	    c5 = -Y_and_X
	    c6 = -Y_and_X
	elif p3 == 3:
	    c5 = Y_and_X
	    c6 = -Y_and_X
	elif p3 == 4:
	    c5 = Y_at_ZeroX
	    c6 = 0
	elif p3 == 5:
	    c5 = Y_and_X
	    c6 = Y_and_X
	elif p3 == 6:
	    c5 = -Y_and_X
	    c6 = Y_and_X
	
	#position4
	if p4 == 1:
	    c7 = -Y_at_ZeroX
	    c8 = 0
	elif p4 == 2:
	    c7 = -Y_and_X
	    c8 = -Y_and_X
	elif p4 == 3:
	    c7 = Y_and_X
	    c8 = -Y_and_X
	elif p4 == 4:
	    c7 = Y_at_ZeroX
	    c8 = 0
	elif p4 == 5:
	    c7 = Y_and_X
	    c8 = Y_and_X
	elif p4 == 6:
	    c7 = -Y_and_X
	    c8 = Y_and_X
	
	#position5
	if p5 == 1:
	    c9 = -Y_at_ZeroX
	    c10 = 0
	elif p5 == 2:
	    c9 = -Y_and_X
	    c10 = -Y_and_X
	elif p5 == 3:
	    c9 = Y_and_X
	    c10 = -Y_and_X
	elif p5 == 4:
	    c9 = Y_at_ZeroX
	    c10 = 0
	elif p5 == 5:
	    c9 = Y_and_X
	    c10 = Y_and_X
	elif p5 == 6:
	    c9 = -Y_and_X
	    c10 = Y_and_X
	
	#position6
	if p6 == 1:
	    c11 = -Y_at_ZeroX
	    c12 = 0
	elif p6 == 2:
	    c11 = -Y_and_X
	    c12 = -Y_and_X
	elif p6 == 3:
	    c11 = Y_and_X
	    c12 = -Y_and_X
	elif p6 == 4:
	    c11 = Y_at_ZeroX
	    c12 = 0
	elif p6 == 5:
	    c11 = Y_and_X
	    c12 = Y_and_X
	elif p6 == 6:
	    c11 = -Y_and_X
	    c12 = Y_and_X
	
	#create variable that contains the position of each letter
	posLet1 = c1, c2
	posLet2 = c3, c4
	posLet3 = c5, c6
	posLet4 = c7, c8
	posLet5 = c9, c10
	posLet6 = c11, c12
	
	#rename coordinates into position on the screen
	if posLet1 == (-Y_at_ZeroX, 0):
		posLet1 = 'left'
	elif posLet1 == (-Y_and_X, -Y_and_X):
		posLet1 = 'top left'
	elif posLet1 == (Y_and_X, -Y_and_X):
		posLet1 = 'top right'
	elif posLet1 == (Y_at_ZeroX, 0):
		posLet1 = 'right'
	elif posLet1 == (Y_and_X, Y_and_X):
		posLet1 = 'bot right'
	elif posLet1 == (-Y_and_X, Y_and_X):
		posLet1 = 'bot left'
		
	if posLet2 == (-Y_at_ZeroX, 0):
		posLet2 = 'left'
	elif posLet2 == (-Y_and_X, -Y_and_X):
		posLet2 = 'top left'
	elif posLet2 == (Y_and_X, -Y_and_X):
		posLet2 = 'top right'
	elif posLet2 == (Y_at_ZeroX, 0):
		posLet2 = 'right'
	elif posLet2 == (Y_and_X, Y_and_X):
		posLet2 = 'bot right'
	elif posLet2 == (-Y_and_X, Y_and_X):
		posLet2 = 'bot left'
		
	if posLet3 == (-Y_at_ZeroX, 0):
		posLet3 = 'left'
	elif posLet3 == (-Y_and_X, -Y_and_X):
		posLet3 = 'top left'
	elif posLet3 == (Y_and_X, -Y_and_X):
		posLet3 = 'top right'
	elif posLet3 == (Y_at_ZeroX, 0):
		posLet3 = 'right'
	elif posLet3 == (Y_and_X, Y_and_X):
		posLet3 = 'bot right'
	elif posLet3 == (-Y_and_X, Y_and_X):
		posLet3 = 'bot left'
		
	if posLet4 == (-Y_at_ZeroX, 0):
		posLet4 = 'left'
	elif posLet4 == (-Y_and_X, -Y_and_X):
		posLet4 = 'top left'
	elif posLet4 == (Y_and_X, -Y_and_X):
		posLet4 = 'top right'
	elif posLet4 == (Y_at_ZeroX, 0):
		posLet4 = 'right'
	elif posLet4 == (Y_and_X, Y_and_X):
		posLet4 = 'bot right'
	elif posLet4 == (-Y_and_X, Y_and_X):
		posLet4 = 'bot left'
		
	if posLet5 == (-Y_at_ZeroX, 0):
		posLet5 = 'left'
	elif posLet5 == (-Y_and_X, -Y_and_X):
		posLet5 = 'top left'
	elif posLet5 == (Y_and_X, -Y_and_X):
		posLet5 = 'top right'
	elif posLet5 == (Y_at_ZeroX, 0):
		posLet5 = 'right'
	elif posLet5 == (Y_and_X, Y_and_X):
		posLet5 = 'bot right'
	elif posLet5 == (-Y_and_X, Y_and_X):
		posLet5 = 'bot left'
		
	if posLet6 == (-Y_at_ZeroX, 0):
		posLet6 = 'left'
	elif posLet6 == (-Y_and_X, -Y_and_X):
		posLet6 = 'top left'
	elif posLet6 == (Y_and_X, -Y_and_X):
		posLet6 = 'top right'
	elif posLet6 == (Y_at_ZeroX, 0):
		posLet6 = 'right'
	elif posLet6 == (Y_and_X, Y_and_X):
		posLet6 = 'bot right'
	elif posLet6 == (-Y_and_X, Y_and_X):
		posLet6 = 'bot left'
	
	
	#make letter and position variables available for other items in the experiment
	exp.set('L1', Letter1)
	exp.set('L2', Letter2)
	exp.set('L3', Letter3)
	exp.set('L4', Letter4)
	exp.set('L5', Letter5)
	exp.set('L6', Letter6)
	
	exp.set('c1', c1)
	exp.set('c2', c2)
	exp.set('c3', c3)
	exp.set('c4', c4)
	exp.set('c5', c5)
	exp.set('c6', c6)
	exp.set('c7', c7)
	exp.set('c8', c8)
	exp.set('c9', c9)
	exp.set('c10', c10)
	exp.set('c11', c11)
	exp.set('c12', c12)
	
	exp.set('pLetter1', posLet1)
	exp.set('pLetter2', posLet2)
	exp.set('pLetter3', posLet3)
	exp.set('pLetter4', posLet4)
	exp.set('pLetter5', posLet5) 
	exp.set('pLetter6', posLet6)
	__end__
	set description "Executes Python code"

define keyboard_response _flushkeys
	set description "Collects keyboard responses"
	set timeout "0"
	set flush "yes"

define sketchpad Partial_Report
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [c1] [c2] "[L1]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c3] [c4] "[L2]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c5] [c6] "[L3]" center=1 color=blue font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c7] [c8] "[L4]" center=1 color=blue font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c9] [c10] "[L5]" center=1 color=blue font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c11] [c12] "[L6]" center=1 color=blue font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"

define sketchpad Fixation
	set duration "1000"
	set description "Displays stimuli"
	draw textline 0 0 "+" center=1 color=red font_family="Arial" font_size=68 font_italic=no font_bold=no show_if="always" html="yes"

define text_display Begruessung
	set foreground "white"
	set font_size "36"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	__content__
	Hallo, willkommen zum TVA!
	In diesem Experiment wird XYZ passieren.
	Ihre Aufgabe wird XYZ sein.
	
	DrU+00FCcken Sie irgendeine Taste, um zu starten.
	__end__
	set background "black"
	set duration "keypress"
	set font_family ""

define sketchpad Masks
	set duration "keypress"
	set description "Displays stimuli"
	draw image [c1] [c2] "mask.png" scale=1 center=1 show_if="always"
	draw image [c3] [c4] "mask.png" scale=1 center=1 show_if="always"
	draw image [c5] [c6] "mask.png" scale=1 center=1 show_if="always"
	draw image [c7] [c8] "mask2.png" scale=1 center=1 show_if="always"
	draw image [c9] [c10] "mask2.png" scale=1 center=1 show_if="always"
	draw image [c11] [c12] "mask2.png" scale=1 center=1 show_if="always"

define sketchpad Whole_Report_2
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [c1] [c2] "[L1]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c3] [c4] "[L2]" center=1 color=red font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c5] [c6] "[L3]" center=1 color=black font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c7] [c8] "[L4]" center=1 color=black font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c9] [c10] "[L5]" center=1 color=black font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [c11] [c12] "[L6]" center=1 color=black font_family="Arial" font_size=137 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script Start_block
	___run__
	# Import the widgets library
	from libopensesame import widgets
	
	# Create a form
	form = widgets.form(self.experiment, cols=[1], rows=[1],
		margins=(250,500,250,500), spacing=0)
	
	if 'block' in locals():
		print('yay')
	else:
		block = 1
	
	# Create four widgets
	Cross = widgets.label(form, text='<span color="white", size="36">Gleich startet der %d. Block. DrU+00FCcken Sie die LEERTASTE, um zu beginnen.</span>' % block)
	
	# Add the widgets to the form. The position in the form is indicated as a
	# (column, row) tuple.
	form.set_widget(Cross, (0,0))
	
	block = block + 1
	
	form.render()
	__end__
	set _prepare ""
	set description "Executes Python code"

define keyboard_response keyboard_response
	set description "Collects keyboard responses"
	set timeout "infinite"
	set flush "yes"

define sequence experiment
	run Begruessung "always"
	run Block_1_to_9 "always"

define sequence StartScreen_and_Trials
	run Start_block "always"
	run keyboard_response "always"
	run Loop_trials "always"

define loop Block_1_to_9
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "StartScreen_and_Trials"
	set column_order "Block"
	set cycles "9"
	set order "sequential"
	setcycle 0 Block "1"
	setcycle 1 Block "2"
	setcycle 2 Block "3"
	setcycle 3 Block "4"
	setcycle 4 Block "5"
	setcycle 5 Block "6"
	setcycle 6 Block "7"
	setcycle 7 Block "8"
	setcycle 8 Block "9"
	run StartScreen_and_Trials

define text_display BlankScreen_100ms
	set foreground "white"
	set font_size "24"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content ""
	set background "black"
	set duration "100"
	set font_family ""

define logger logger
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "yes"
	log "L1"
	log "L2"
	log "L3"
	log "L4"
	log "L5"
	log "L6"
	log "pLetter1"
	log "pLetter2"
	log "pLetter3"
	log "pLetter4"
	log "pLetter5"
	log "pLetter6"
	log "Letter_duration"
	log "Condition"
	log "response"
	log "Block"

define sequence Sequence_trials
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Fixation "always"
	run BlankScreen_100ms "always"
	run Letter_generation "always"
	run Whole_Report_6 "[Condition] = 1"
	run Whole_Report_2 "[Condition] = 2"
	run Partial_Report "[Condition] = 3"
	run Masks "always"
	run _flushkeys "always"
	run Letter_Reproduction "always"
	run logger "always"

