# Generated by OpenSesame 2.8.0 (Gutsy Gibson)
# Mon Mar 17 12:27:35 2014 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "xpyriment"
set subject_parity "even"
set height "1080"
set font_family "Arial"
set font_italic "no"
set synth_backend "legacy"
set title "Insert_Resolution_here"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "red"
set font_bold "no"
set description "Default description"
set background "black"
set font_size "68"
set keyboard_backend "legacy"
set canvas_backend "xpyriment"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1920"

define inline_script Letter_generation
	set _run ""
	___prepare__
	###the 6 letters that are presented on the screen are created here
	
	#Import random number generator
	import random
	random.seed()
	
	letter_list=[]
	
	if self.get('Condition') != 2:
		#take 6 numbers out of 20 without replacement
		n1 = random.randint(1,20)
		letter_list.append(n1)
		n2 = random.randint(1,20)
		while n2 == n1:
			n2 = random.randint(1,20)
		letter_list.append(n2)	
		n3 = random.randint(1,20)
		while n3 == n2 or n3 == n1:
			n3 = random.randint(1,20)
		letter_list.append(n3)
		n4 = random.randint(1,20)
		while n4 == n3 or n4 == n2 or n4 == n1:
			n4 = random.randint(1,20)
		letter_list.append(n4)
		n5 = random.randint(1,20)
		while n5 == n4 or n5 == n3 or n5 == n2 or n5 == n1:
			n5 = random.randint(1,20)
		letter_list.append(n5)
		n6 = random.randint(1,20)
		while n6 == n5 or n6 == n4 or n6 == n3 or n6 == n2 or n6 == n1:
			n6 = random.randint(1,20)
		letter_list.append(n6)
	else:
		n1 = random.randint(1,20)
		letter_list.append(n1)
		n2 = random.randint(1,20)
		while n2 == n1:
			n2 = random.randint(1,20)
		letter_list.append(n2)
		for i in range(4):
			letter_list.append(0) # add four zeros to the letter list
	
	
	#create list that will contain the actual letters that are presented
	letters = []
	
	for i in letter_list:
		
		if i == 0:
			letters.append('0')
		elif i == 1:
			letters.append('A') # append letters to list
		elif i == 2:
			letters.append('B')
		elif i == 3:
			letters.append('D')
		elif i == 4:
			letters.append('E')
		elif i == 5:
			letters.append('F')
		elif i == 6:
			letters.append('G')
		elif i == 7:
			letters.append('H')
		elif i == 8:
			letters.append('J')
		elif i == 9:
			letters.append('K')
		elif i == 10:
			letters.append('L')
		elif i == 11:
			letters.append('M')
		elif i == 12:
			letters.append('N')
		elif i == 13:
			letters.append('O')
		elif i == 14:
			letters.append('P')
		elif i == 15:
			letters.append('R')
		elif i == 16:
			letters.append('S')
		elif i == 17:
			letters.append('T')
		elif i == 18:
			letters.append('V')
		elif i == 19:
			letters.append('X')
		elif i == 20:
			letters.append('Z')
	
	#each letter must be in one variable to be presented; lists do not work
	L1 = letters[0]
	L2 = letters[1]
	L3 = letters[2]
	L4 = letters[3]
	L5 = letters[4]
	L6 = letters[5]
	
	exp.set('L1', L1)
	exp.set('L2', L2)
	exp.set('L3', L3)
	exp.set('L4', L4)
	exp.set('L5', L5)
	exp.set('L6', L6)
	
	
	# import coordinates and randomize them
	
	#coordinates for the presentation
	
	c1 = -self.get('Y_at_ZeroX'), 0
	c2 = -self.get('Y_and_X'), -self.get('Y_and_X')
	c3 = self.get('Y_and_X'), -self.get('Y_and_X')
	c4 = self.get('Y_at_ZeroX'), 0
	c5 = self.get('Y_and_X'), self.get('Y_and_X')
	c6 = -self.get('Y_and_X'), self.get('Y_and_X')
	
	coordinates = [c1, c2, c3, c4, c5, c6]
	
	random.shuffle(coordinates)
	
	c1 = coordinates[0]
	c2 = coordinates[1]
	c3 = coordinates[2]
	c4 = coordinates[3]
	c5 = coordinates[4]
	c6 = coordinates[5]
	
	
	p1 = c1[0]
	p2 = c1[1]
	p3 = c2[0]
	p4 = c2[1]
	p5 = c3[0]
	p6 = c3[1]
	p7 = c4[0]
	p8 = c4[1]
	p9 = c5[0]
	p10 = c5[1]
	p11 = c6[0]
	p12 = c6[1]
	
	
	exp.set('p1', p1)
	exp.set('p2', p2)
	exp.set('p3', p3)
	exp.set('p4', p4)
	exp.set('p5', p5)
	exp.set('p6', p6)
	exp.set('p7', p7)
	exp.set('p8', p8)
	exp.set('p9', p9)
	exp.set('p10', p10)
	exp.set('p11', p11)
	exp.set('p12', p12)
	
	
	#save position of the letters
	cor_list = []
	
	for i in coordinates:
		if i == (-self.get('Y_at_ZeroX'), 0):
			cor_list.append('left')
		elif i == (-self.get('Y_and_X'), -self.get('Y_and_X')):
			cor_list.append('top left')
		elif i == (self.get('Y_and_X'), -self.get('Y_and_X')):
			cor_list.append('top right')
		elif i == (self.get('Y_at_ZeroX'), 0):
			cor_list.append('right')
		elif i == (self.get('Y_and_X'), self.get('Y_and_X')):
			cor_list.append('bot right')
		elif i == (-self.get('Y_and_X'), self.get('Y_and_X')):
			cor_list.append('bot left')
	
	
	posLet1 = cor_list[0]
	posLet2 = cor_list[1]
	posLet3 = cor_list[2]
	posLet4 = cor_list[3]
	posLet5 = cor_list[4]
	posLet6 = cor_list[5]
	
	exp.set('posLet1', posLet1)
	exp.set('posLet2', posLet2)
	exp.set('posLet3', posLet3)
	exp.set('posLet4', posLet4)
	exp.set('posLet5', posLet5)
	exp.set('posLet6', posLet6)
	__end__
	set description "Executes Python code"

define sketchpad Whole_Report_6
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [p1] [p2] "[L1]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p3] [p4] "[L2]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p5] [p6] "[L3]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p7] [p8] "[L4]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p9] [p10] "[L5]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p11] [p12] "[L6]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"

define inline_script Adjust_monitor
	___run__
	#you only need to insert the four parameters (see below) 
	# + dont forget to set the resolution in the upper most item on the in the item overview on the left (name: TVA test)
	# the first three settings can simply be adjusted to your experimental settings
	# use the sample experiment in the calibration folder to adjust letter size and insert it below
	
	
	
	##insert your parameters here
	screen_width = 51.5 ## cm width of your screen
	resolution_width = 1920 ## pixel width of your screen
	screen_distance = 60 ## how far from the screen will participants be seated
	letter_size = 140 ## must correspond to a visual angle of 2.7; calibrate in the sample experiment
	
	
	
	
	# from here: the positioning of the stimuli on the screen is determined
	import math
	
	# define tangez function so that seating distance can be related to stimuli size
	def tan(x):
	    tangenz = math.tan((math.pi/180)*x)
	    return tangenz
	
	# this formula converts visual angle to cm
	radius = 2*screen_distance*tan(7.5/2) # the radius in which the letters are presented around the center must correspond to a 7.5 degree of visual angle
	
	#compute coordinates for the letter positioning; these are used in the Letter_generation item to position the letters
	Y_at_ZeroX = (resolution_width / screen_width)*radius
	Y_and_X = (Y_at_ZeroX/math.sqrt(2))
	
	
	#set the variables to the experiment
	exp.set('Y_at_ZeroX', Y_at_ZeroX)
	exp.set('Y_and_X', Y_and_X)
	exp.set('letter_size', letter_size)
	__end__
	set _prepare ""
	set description "Executes Python code"

define sketchpad Whole_Report_2
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [p1] [p2] "[L1]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p3] [p4] "[L2]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p5] [p6] "[L3]" center=1 color=black font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p7] [p8] "[L4]" center=1 color=black font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p9] [p10] "[L5]" center=1 color=black font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p11] [p12] "[L6]" center=1 color=black font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"

define sequence Sequence_practice_trials
	run Fixation "always"
	run BlankScreen_100ms "always"
	run Letter_generation "always"
	run Whole_Report_6 "[Condition]=1"
	run Whole_Report_2 "[Condition]=2"
	run Partial_Report "[Condition]=3"
	run Masks "always"
	run _flushkeys "always"
	run set_response_empty "always"
	run Letter_Reproduction "always"
	run Block_0 "always"
	run compute_accuracy "always"
	run logger "always"

define inline_script Block_0
	set _run ""
	___prepare__
	#this script is only here so that in the practice block, the variable 'Block' is set to 0
	
	Block = 0
	exp.set('Block', Block)
	__end__
	set description "Executes Python code"

define keyboard_response _flushkeys
	set description "Collects keyboard responses"
	set timeout "0"
	set flush "yes"

define sketchpad Fixation
	set duration "995"
	set description "Displays stimuli"
	draw textline 0 0 "+" center=1 color=red font_family="Arial" font_size=68 font_italic=no font_bold=no show_if="always" html="yes"

define loop Loop_experimental_Trials
	set repeat "1"
	set description "Repeatedly runs another item"
	set item "Sequence_experimental_trials"
	set column_order "Condition;Letter_duration"
	set cycles "36"
	set order "random"
	setcycle 0 Letter_duration "5"
	setcycle 0 Condition "1"
	setcycle 1 Letter_duration "15"
	setcycle 1 Condition "1"
	setcycle 2 Letter_duration "45"
	setcycle 2 Condition "1"
	setcycle 3 Letter_duration "75"
	setcycle 3 Condition "1"
	setcycle 4 Letter_duration "135"
	setcycle 4 Condition "1"
	setcycle 5 Letter_duration "195"
	setcycle 5 Condition "1"
	setcycle 6 Letter_duration "5"
	setcycle 6 Condition "1"
	setcycle 7 Letter_duration "15"
	setcycle 7 Condition "1"
	setcycle 8 Letter_duration "45"
	setcycle 8 Condition "1"
	setcycle 9 Letter_duration "75"
	setcycle 9 Condition "1"
	setcycle 10 Letter_duration "135"
	setcycle 10 Condition "1"
	setcycle 11 Letter_duration "195"
	setcycle 11 Condition "1"
	setcycle 12 Letter_duration "5"
	setcycle 12 Condition "1"
	setcycle 13 Letter_duration "15"
	setcycle 13 Condition "1"
	setcycle 14 Letter_duration "45"
	setcycle 14 Condition "1"
	setcycle 15 Letter_duration "75"
	setcycle 15 Condition "1"
	setcycle 16 Letter_duration "135"
	setcycle 16 Condition "1"
	setcycle 17 Letter_duration "195"
	setcycle 17 Condition "1"
	setcycle 18 Letter_duration "75"
	setcycle 18 Condition "2"
	setcycle 19 Letter_duration "75"
	setcycle 19 Condition "2"
	setcycle 20 Letter_duration "75"
	setcycle 20 Condition "2"
	setcycle 21 Letter_duration "75"
	setcycle 21 Condition "2"
	setcycle 22 Letter_duration "75"
	setcycle 22 Condition "2"
	setcycle 23 Letter_duration "75"
	setcycle 23 Condition "2"
	setcycle 24 Letter_duration "75"
	setcycle 24 Condition "2"
	setcycle 25 Letter_duration "75"
	setcycle 25 Condition "2"
	setcycle 26 Letter_duration "75"
	setcycle 26 Condition "2"
	setcycle 27 Letter_duration "75"
	setcycle 27 Condition "3"
	setcycle 28 Letter_duration "75"
	setcycle 28 Condition "3"
	setcycle 29 Letter_duration "75"
	setcycle 29 Condition "3"
	setcycle 30 Letter_duration "75"
	setcycle 30 Condition "3"
	setcycle 31 Letter_duration "75"
	setcycle 31 Condition "3"
	setcycle 32 Letter_duration "75"
	setcycle 32 Condition "3"
	setcycle 33 Letter_duration "75"
	setcycle 33 Condition "3"
	setcycle 34 Letter_duration "75"
	setcycle 34 Condition "3"
	setcycle 35 Letter_duration "75"
	setcycle 35 Condition "3"
	run Sequence_experimental_trials

define sketchpad Masks
	set duration "495"
	set description "Displays stimuli"
	draw image [p1] [p2] "mask.png" scale=1 center=1 show_if="always"
	draw image [p3] [p4] "mask2.png" scale=1 center=1 show_if="always"
	draw image [p5] [p6] "mask3.png" scale=1 center=1 show_if="always"
	draw image [p7] [p8] "mask4.png" scale=1 center=1 show_if="always"
	draw image [p9] [p10] "mask.png" scale=1 center=1 show_if="always"
	draw image [p11] [p12] "mask2.png" scale=1 center=1 show_if="always"

define sequence experiment
	run Instructions "always"
	run Adjust_monitor "always"
	run keyboard_response "always"
	run Loop_practice_trials "always"
	run Block_1_to_12 "always"

define sketchpad feedback_start_block
	# draw textline 0 64 "Time since the experiment started: [time_progress]" center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	set duration "keypress"
	set description "Displays stimuli"
	draw textline 0 0 "Please report only letters of which you are fairly certain that they were presented (80-90% correct)." center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="[accurat]<80" html="yes"
	draw textline 0 -128 "You have completed the practice phase." center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="[Block]=1" html="yes"
	draw textline 0 -64 "In this block, [accurat]% of your answers were correct." center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 128 "You are about to start the [Block]. block of the experiment. Press the SPACEBAR to start." center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="[end]=0" html="yes"
	draw textline 0 128 "This is the end of the experiment. Thank you for your participation. Please contact the examiner." center=1 color=white font_family="Arial" font_size=24 font_italic=no font_bold=no show_if="[end]=1" html="yes"

define logger logger
	set ignore_missing "yes"
	set description "Logs experimental data"
	set auto_log "no"
	set use_quotes "yes"
	log "L1"
	log "L2"
	log "L3"
	log "L4"
	log "L5"
	log "L6"
	log "posLet1"
	log "posLet2"
	log "posLet3"
	log "posLet4"
	log "posLet5"
	log "posLet6"
	log "Block"
	log "response"
	log "Letter_duration"
	log "Condition"
	log "count_correct"
	log "count_responses"
	log "subject_nr"
	log "time_progress"
	log "exp_minutes"
	log "exp_seconds"
	log "correct_responses"
	log "number_responses"
	log "accumulated_accuracy"

define inline_script Instructions
	___run__
	# Import the widgets library
	from libopensesame import widgets
	
	# Create a form
	form = widgets.form(self.experiment, cols=[1], rows=[1],
		margins=(50,100,50,100), spacing=0)
	
	
	# Create and place widget
	text = widgets.label(form, text='<span size="24", color="white", style="mono">Thank you for participating in this study.<br /><br /> U+005C
	U+005C
	In the following experiment, a red cross will be displayed in the center of the screen. Please fix your gaze on this red cross during the experiment. Shortly after the cross is displayed, either <i>two</i> or <i>six</i> <span color="red">red letters</span> will appear on an invisible circle surrounding the cross. In some trials, in which only two red letters are shown, four <span color="blue">blue letters</span> will be displayed simultaneously. All letters will be visible for a short amount of time only.<br /><br /> U+005C
	U+005C
	Your task will be to pay attention to the <span color="red">red letters</span>. After the presentation, please report which red letters you saw. Report only those letters of which you are fairly certain that they were presented. Please make sure that 80-90% of the letters you report are correct.<br /><br /> U+005C
	U+005C
	Following every block, you will receive feedback about the accuracy of your answers that is how many of the reported letters were indeed presented.<br /><br /> U+005C
	U+005C
	Altogether the experiment consists of 13 blocks lasting 3 minutes each. The first block is a practice block to familiarize yourself with the task. After each block you will be able to take a brief break. The entire experiment will last about 40 Minutes.<br /><br /> U+005C
	U+005C
	If you have any questions, please contact the examiner now.<br /><br /><br /><br /> U+005C
	U+005C
	<span size="30">Press the SPACEBAR to start the practice block.</span>', center=False)
	form.set_widget(text, (0,0))
	
	form.render()
	__end__
	___prepare__
	#set feedback variables
	count_responses = 0 #how many answers are given
	count_correct = 0 #how many answers are correct
	
	
	exp.set('count_correct', count_correct)
	exp.set('count_responses', count_responses)
	
	from datetime import datetime 
	
	global start_time 
	start_time = datetime.now() # use to keep track of the time since experiment has started
	# make this variable global since OpenSesame exp.set only works for simple variable types
	print start_time
	
	exp.set('start_time', start_time)
	
	end = 0 # used to show end message for experiment
	exp.set('end', end)
	__end__
	set description "Executes Python code"

define sketchpad Partial_Report
	set duration "[Letter_duration]"
	set description "Displays stimuli"
	draw textline [p1] [p2] "[L1]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p3] [p4] "[L2]" center=1 color=red font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p5] [p6] "[L3]" center=1 color=blue font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p7] [p8] "[L4]" center=1 color=blue font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p9] [p10] "[L5]" center=1 color=blue font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"
	draw textline [p11] [p12] "[L6]" center=1 color=blue font_family="Arial" font_size=[letter_size] font_italic=no font_bold=no show_if="always" html="yes"

define loop Loop_practice_trials
	set repeat "2"
	set description "Repeatedly runs another item"
	set item "Sequence_practice_trials"
	set column_order "Condition;Letter_duration"
	set cycles "18"
	set order "random"
	setcycle 0 Letter_duration "5"
	setcycle 0 Condition "1"
	setcycle 1 Letter_duration "15"
	setcycle 1 Condition "1"
	setcycle 2 Letter_duration "45"
	setcycle 2 Condition "1"
	setcycle 3 Letter_duration "75"
	setcycle 3 Condition "1"
	setcycle 4 Letter_duration "135"
	setcycle 4 Condition "1"
	setcycle 5 Letter_duration "195"
	setcycle 5 Condition "1"
	setcycle 6 Letter_duration "75"
	setcycle 6 Condition "2"
	setcycle 7 Letter_duration "75"
	setcycle 7 Condition "2"
	setcycle 8 Letter_duration "75"
	setcycle 8 Condition "2"
	setcycle 9 Letter_duration "75"
	setcycle 9 Condition "2"
	setcycle 10 Letter_duration "75"
	setcycle 10 Condition "2"
	setcycle 11 Letter_duration "75"
	setcycle 11 Condition "2"
	setcycle 12 Letter_duration "75"
	setcycle 12 Condition "3"
	setcycle 13 Letter_duration "75"
	setcycle 13 Condition "3"
	setcycle 14 Letter_duration "75"
	setcycle 14 Condition "3"
	setcycle 15 Letter_duration "75"
	setcycle 15 Condition "3"
	setcycle 16 Letter_duration "75"
	setcycle 16 Condition "3"
	setcycle 17 Letter_duration "75"
	setcycle 17 Condition "3"
	run Sequence_practice_trials

define text_display BlankScreen_100ms
	set foreground "white"
	set font_size "24"
	set description "Presents a display consisting of text"
	set maxchar "50"
	set align "center"
	set content ""
	set background "black"
	set duration "95"
	set font_family "mono"

define sequence StartScreen_and_Trials
	run prepare_feedback "always"
	run feedback_start_block "always"
	run Loop_experimental_Trials "always"

define form_text_input Letter_Reproduction
	# widget 0 0 1 1 label text="[form_title]"
	set rows "1;1;6"
	set description "A simple text input form"
	set cols "1"
	set form_var "response"
	set form_title "Reproduction"
	set form_question "Which red letters did you just see?"
	set margins "200;400;200;400"
	widget 0 1 1 1 label center="no" text="[form_question]"
	widget 0 2 1 1 text_input focus="yes" stub="" return_accepts="yes" var="[form_var]"


define inline_script set_response_empty
	___run__
	# set response to "" for each trial
	# else a none-response is saved as 'None' which cannot be distinguished from the case when a participant types 'None'
	
	response = ""
	exp.set('response', response)
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop Block_1_to_12
	set repeat "1"
	set description "Repeatedly runs another item"
	set skip "0"
	set item "StartScreen_and_Trials"
	set column_order "Block"
	set cycles "12"
	set order "sequential"
	setcycle 0 Block "1"
	setcycle 1 Block "2"
	setcycle 2 Block "3"
	setcycle 3 Block "4"
	setcycle 4 Block "5"
	setcycle 5 Block "6"
	setcycle 6 Block "7"
	setcycle 7 Block "8"
	setcycle 8 Block "9"
	setcycle 9 Block "10"
	setcycle 10 Block "11"
	setcycle 11 Block "12"
	run StartScreen_and_Trials

define sequence Sequence_experimental_trials
	set flush_keyboard "yes"
	set description "Runs a number of items in sequence"
	run Fixation "always"
	run BlankScreen_100ms "always"
	run Letter_generation "always"
	run Whole_Report_6 "[Condition] = 1"
	run Whole_Report_2 "[Condition] = 2"
	run Partial_Report "[Condition] = 3"
	run Masks "always"
	run _flushkeys "always"
	run set_response_empty "always"
	run Letter_Reproduction "always"
	run compute_accuracy "always"
	run logger "always"

define keyboard_response keyboard_response
	set description "Collects keyboard responses"
	set timeout "infinite"
	set flush "yes"

define inline_script compute_accuracy
	___run__
	# change letter_duration output so that actual duration is saved
	Letter_duration = self.get('Letter_duration') + 5
	exp.set('Letter_duration', Letter_duration)
	
	# keep track of time
	from datetime import datetime
	progress = datetime.now()-start_time
	exp_minutes = progress.seconds / 60
	exp_seconds = progress.seconds % 60
	
	time_progress = "%d minutes, %d seconds" % (exp_minutes, exp_seconds)
	exp.set('time_progress', time_progress)
	exp.set('exp_minutes', exp_minutes)
	exp.set('exp_seconds', exp_seconds)
	
	
	# from here: response handling
	
	#import response as string (!)
	response = str(self.get('response'))
	
	# remove white space, commata, points etc. from response
	import re
	def strp(string):
	    
	     new = re.sub('[^U+005Cw]', '', string)
	     return new.replace("_", "")
	
	response = strp(response)
	
	
	# change letter input to "-" if no answer has been made
	
	if response == '':
		x = '-'
		response = '-'
		count_responses = self.get('count_responses') + 0
		number_responses = 0
	
	else:
		response = response.upper() # use capital letters in response, so that it can be compared to the presented letters
		x = response # use 'x' to compute accuracy; 'response' will remain the variable that is saved as response in the logger
		count_responses = self.get('count_responses') + len(response) 
		number_responses = len(response) 
	
	
	# compute accuracy of responses for each block so a feedback can be given
	# get response and compare it to the presented letters
	
	# import letters as list
	
	letters = [self.get('L1'), self.get('L2'), self.get('L3'), self.get('L4'), self.get('L5'), self.get('L6')]
	
	# no response was given
	if x == '-':
		count_correct = self.get('count_correct') + 0	
		correct_responses = 0
		
	
	# response was given:
	# x is used instead of variable 'responses' to compute accuracy, x will be unique capital letters that have been reported
	# 'responses' also included double responses and numbers
	elif x != '-':  
		x = set(x) # only use each letter once, else two of the same responses will result in two correct answers
		count_correct = self.get('count_correct') # will be updated in the for loop below	
		correct_responses = 0 # will also be updated in the for loop below
		
		# loop that compares reported letters to presented letters 
		if self.get('Condition') == 1: # only here the whole list of six letters is needed to compute correctness
			for i in x:
				if i in letters:
					count_correct += 1
					correct_responses += 1
		else:
			for i in x:
				if i in letters[0:2]:
					count_correct += 1
					correct_responses += 1
	
	# compute the accumulated accuracy for the blocks
	
	if count_responses != 0:
		accumulated_accuracy = float(count_correct) / float(count_responses)
	else:
		accumulated_accuracy = None # will result in None if no response has yet been made -> accuracy cannot be computed in this case
			
	
	#set the relevant variables
	exp.set('count_correct', count_correct) # counts up till end of each block
	exp.set('count_responses', count_responses) # counts up till end of each block
	exp.set('correct_responses', correct_responses) # correct responses in each trial
	exp.set('number_responses', number_responses) # number of responses in each block
	exp.set('accumulated_accuracy', accumulated_accuracy)  # accumulated accuracy in the present block
	exp.set('response', response)
	__end__
	set _prepare ""
	set description "Executes Python code"

define inline_script prepare_feedback
	set _run ""
	___prepare__
	accurat = self.get('accumulated_accuracy') * 100
	accurat = int(accurat) # for feedback
	
	# reset feedback variables to 0
	count_correct = 0 
	count_responses = 0
	
	exp.set('count_correct', count_correct) 
	exp.set('count_responses', count_responses)
	exp.set('accurat', accurat) # for feedback
	__end__
	set description "Executes Python code"

